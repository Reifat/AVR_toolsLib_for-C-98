Автор Reifat
GitHub Repository - https://github.com/Reifat
Последние изменения 30.04.2020.

Класс RegisterSet - обертка для регистров, которая упращает работу с его разрядами.
Класс работает с регистром через указатель на него, предоставляет доступ к его разрядам 
аналогичный доступу к элементам массива. 
В классе определены все основные методы для работы и манипуляции с разрядами регистра. 

Функция BitInit - позволяет инициализировать регистр заданными значениями разрядов.
Это придает гибкости, в случаях когда значение каких либо разрядов регистра зависит 
от результата работы некой другой функции.

Класс RegisterSet  реализован в двух версияхи:
1. Статическая версия - состояние объекта определяется статическим свойством класса
2. Нестатическая версия.
Для каждой версии есть debug режим, который выполняет проверку на этапе компиляции.
Проверка выполняется для введенного типа шаблона класса RegisterSet, и выход за границы размера регистра.
Полная реализация класса RegisterSet находится в пространстве имен:
mbl::rs - namespace: meta bit library -> RegisterSet.
Версии класса RegisterSet находятся в пространствах имен:
1. mbl::rs::s_rs  - namespace: meta bit library -> RegisterSet -> static RegisterSet 
2. mbl::rs::ns_rs - namespace: meta bit library -> RegisterSet -> not static RegisterSet 
3. mbl::d_rs	  - namespace: meta bit library -> debug_RegisterSet

Функция BitInit, также как и класс RegisterSet, разделена на 2 версии.
Для инициализации объектов со статическими свойствами класса RegisterSet, так и для обычных.
Соответствии эти версии размещены в своих пространствах имен:
1. s_bi  - Пространство имен функции BitInit для инициализации статических объектов
2. nc_bi - Пространство имен функции BitInit для инициализации нестатических объектов

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Создание объекта, его инициализация и методы класса RegisterSet

Для упрощения взаимодействия с различными версиями класса RegisterSet в пространстве имен "mbl" 
есть две оболочки:
1.   RegisterSet<Ty> - оболочка для RegisterSet, здесь  "Ty" - имя типа данных шаблона;
2. d_RegisterSet<Ty> - оболочка для debug RegisterSet,  "Ty" - имя типа данных шаблона.

* * * * Создания объекта * * * * 
1. Объект класса без статических свойств
	mbl::RegisterSet<Ty>::n_static_ obj_name(ptr);
2. Объект класса со статическими свойствоми
	mbl::RegisterSet<Ty>::static_ obj_name(ptr);
3. Debug объект класса без статических свойств
	mbl::d_RegisterSet<Ty>::n_static_ obj_name(ptr);
4. Debug объект класса со статическими свойствоми
	mbl::d_RegisterSet<Ty>::n_static_ obj_name(ptr);
В приведенных примерах:
"Ty" 	  - имя типа данных шаблона, допустимые типы unsigned/signed - all integer data types
n_static_ - класс без статических свойств
static_	  - со статическими свойствами
obj_name  - имя создаваемого объекта
ptr	  - указатель на регистр/переменную типа Ty

Для сокращения записи пространст имен объявлено два макроса:
RegisterSet_not_static__ - для обычных объектов
RegisterSet_static__ 	 - для объектов с статическими свойствами

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Методы и операторы для класса RegisterSet.

Используемые обозначения: 
obj	   - объект класса RegisterSet;
obj_n      - объект класса RegisterSet с номером "n";
var 	   - Переменная
value      - Некоторое значение
bool_value - Булево значение
bool_var   - Булева переменная
ptr	   - Указатель
(available in const obj) - Встречается в описании, обозначает что метод/оператор
			   доступен как для константных объектов так и обычных

Операторы присвоения / Assignment operator * * * * * * * * * * * * * * * * * * * * * * * * * * * *

1. obj = value - присваивает значение value регистру/переменной
		 через объект класса RegisterSet (available in const obj)

2. obj = var   - Присвоение значения переменной var регистру/переменной
		 через объект класса RegisterSet (available in const obj)
Если тип переменной var не совпадает с шаблонным типом объекта класса RegisterSet,
тогда оператор присваивания попытается выполнить преобразование типа переменной к типу шаблона

3. obj = ptr -  изменяет адрес указателя в объекте класса RegisterSet
	        на адрес ptr, тип ptr должен совпадать с шаблонным типом класса.

4. obj_RegisterSet_0 = obj_RegisterSet_1 - присваивет значение регистра/переменной 
					   на которое ссылается obj_RegisterSet_1 
					   объекту obj_RegisterSet_0 (available in const obj)

5. obj = bool_value - Присваивает всем разрядам регистра/перменной на которую ссылается объект
		      класса RegisterSet значениче bool_value. (available in const obj)
		      Оператор присвоения возвразает ссылку на объект obj.

Операторы преобразования типа объекта класса RegisterSet * * * * * * * * * * * * * * * * * * * *
Operators for converting an object type of the "Register Set" class

  var = obj - преобразовывает объект класса RegisterSet к типу переменной var,
	       допускаются преобразования в любые базовые типы, 
	       а также в типы данных которые могут работать с шаблонным типом данных
 	       класса RegisterSet (available in const obj). 

Оператор выделения разряда в регистре/переменной * * * * * * * * * * * * * * * * * * * * * * * * *
на который ссылается объект класса RegisterSet
obj[pos] = bool_value/bool_var - Присвоение значения bool_value разряду регистра/переменной,
		            	 который находится в позиции "pos"
bool_var = obj[pos] - Присвоение значения разряда который находится в позиции "pos" 
		      переменной bool_var.

Операторы логические/побитовые, арифметические, сравнения * * * * * * * * * * * * * * * * * * * *
Основные логические/побитовые, арифметические и сравнения операторы реализованы
через неявное преобразование объекта к базовым типам, после которой выполняется операция.

Ниже в примерах используется:
val - любое целочисленное значение
var - переменная, целочисленного типа

Логические:
       ! obj    	- Лог. НЕ
obj_0 && obj_1/val/var  - Лог. И
obj_0 || obj_1/val/var  - Лог. ИЛИ
(available in const obj)

Побитовые:
      ~  obj           - Побитовая Инверсия
obj_0 &  obj_1/val/var - Побитовая И
obj_0 |  obj_1/val/var - Побитовая ИЛИ
obj_0 ^  obj_1/val/var - Побитовая исключающая ИЛИ
obj_0 << obj_1/val/var - Побитовая сдвиг влево
obj_0 >> obj_1/val/var - Побитовая сдвиг вправо
(available in const obj)

Арифметические оберации над объекътами:
Инкримент  |  Декремент
 obj++     |  obj--	- постфиксный
--obj      |  --obj	- префиксный
(available in const obj)

obj_0 + obj_1/val/var - Сложение 
obj_0 - obj_1/val/var - Вычитание 
obj_0 * obj_1/val/var - Умножение
obj_0 / obj_1/val/var - Деление
obj_0 % obj_1/val/var - Остаток от деления
(available in const obj)

Сравнение объектов
obj_0 == obj_1/val/var  - Равенство
obj_0 != obj_1/val/var  - Неравенство
obj_0 >  obj_1/val/var  - Больше
obj_0 <  obj_1/val/var  - Меньше
obj_0 >= obj_1/val/var  - Больше или равно
obj_0 <= obj_1/val/var  - Меньше или равно
(available in const obj)

Методы * * * * * * * * * * * * * * * * * * *
1. ChangeAddres(ptr) - Изменяет адрес в объекте RegisterSet, на который он ссылается,
		       тип указателя ptr должен совпадать с шаблонным типом объекта.
		       Метод возвращает ссылку  на свой объект.

2. SetInRange(at,to,bool_value) - Установка или сброс разрядов с "at" по "to" в регистре/переменной.
				  Метод возвращает ссылку  на свой объект.
			          bool_value - по умолчанию равен true. (available in const obj)

3. SetInPos(pos, bool_value) - Установка/сброс бита регистра/переменной в позиции "pos"
			       Метод возвращает ссылку  на свой объект.
			       bool_value - по умолчанию равен true. (available in const obj)

4. Set(bool_valu) - Установка или сброс всех битов в регистре/переменной
		    Метод возвращает ссылку  на свой объект.
		    bool_value - по умолчанию равен true. (available in const obj)

5. Reset() - Сброс всех битов в регистре/переменной
	     Метод возвращает ссылку  на свой объект. (available in const obj)

6. All() - Проверяет, чтобы все разряды регистра/переменной были установлены в true
	   Метод возвращает bool_value (available in const obj)

7. Any() - Проверяет, чтобы хотя бы один разряд был установлен в true
	   Метод возвращает bool_value (available in const obj)

8. None() - Проверяет, чтобы никакой из разрядов не был установлен в true
	    Метод возвращает bool_value (available in const obj)

9. size() - Возвращает целочисленный тип, значение которого равно
	    размеру регистра/переменной(т.е. количество его разрядов)
	    (available in const obj)

10. Flip()  - Инвертирует все разряды регистра/переменной,
	      метод возвращает ссылку  на свой объект. (available in const obj)

11. count() - Возвращает целочисленный тип, значение которого равно
              количеству разрядов, установленных в true. (available in const obj)

12. FlipBitInPosition(pos) - Инвертирует бит регистра который находится в указанной позиции "pos",
			     метод возвращает ссылку  на свой объект. (available in const obj)

13. test(pos) - Возвращает true, если разряд в указанной позиции "pos" установлен в true,
		в противном возвращает false.

* * * * * * * Инициализация объекта функцией BitInit* * * * * * * *

В обобщенных примерах, Type - тип на который будет ссылаться объект класса RegisterSet,
nameObj - имя создаваемого объекта, ptr указатель на регистер/переменную н
а которую будет ссылаться объект.
int_0, int_1, ... , int_n - целочисленные значения.
obj - объект класса RegisterSet.
f_0, f_1, ... f_n - Набор функций, которые возвращают целочисленное значение.

Примеры для объектов без статических свойств
1. Создание и инициализация объекта.
Example:
	mbl::RegisterSet<Type>::n_static_ nameObj =
	mbl::ns_bi::BitInit<Type,&ptr>(int_0, int_1, ... , int_n);

2. Присвоение объекту результата работы функции BitInit.
Example:
	obj = mbl::ns_bi::BitInit<mbl::reg8_t>(int_1, int_2, ... , int_n);

3. Некоторые разряды зависят от работы некоторой функции:
Example:
	mbl::RegisterSet<Type>::n_static_ nameObj =
	mbl::ns_bi::BitInit<Type,&ptr>(f_0, int_1, ... ,f_(n-1) , int_n);
4. Каждый разряд зависит от работы некоторой функции:
Example:
	mbl::RegisterSet<Type>::n_static_ nameObj =
	mbl::ns_bi::BitInit<Type,&ptr>(f_0, f_1, ... , f_n);

Для объектов со статическими свойсвами класса RegisterSet все точно также,
только пространство имен "mbl::ns_bi" заменяем на "mbl::s_bi".

Чтобы сократить пространства имен объявлено 2 макроса:
BitInit__	 - Для обычных объектов.
BitInit_static__ - Для объектов с статическими свойствами.

